FIXED BUG: After editing a session, the log display order is reset. Fix the Reverse button state.

FIXED BUG: fixed untouched date field from offsetting by the timezone on submission
    - unchanged edit submission is possible, but this seems benign.
     
POTENTIAL ISSUE: The deployed Heroku container of the Server has a CORS allowance for the non-container Server. I meant to point CORS to itself.
    ie. IS "https://node-lifting-history2.herokuapp.com" - SHOULD BE "https://lifting-history-2-container.herokuapp.com"
        Perhaps this is an incorrect assumption on my part. I should experiment with taking it out altogether if it is in fact unnecessary.
    SOLUTION: Seems to be unnecessary, removing in v3.


VERSION 3:

    DONE: alter get function to - 1 - rename 'date' to 'sessions' - 2 - dynamically create an exercise call based on existing entries.
            FIXED ERROR: No existing sessions throws an error and crashes server.
    DONE: Set up more exercises. Here is the current list:
            BIG ONES:
            - Bench    - Deadlift    - Squat    - Overhead Press    - Bicep    - Tricep    - Grip    - Calf    - Lunge    - Rows    - Shrugs
            - Pull Up    - Push up    - Dips    - Abs    - Lateral Raise    - Good Morning    - Face Pull    - Hip Thrusters    - Hip Abduction
            - Hip Adduction    - Reverse Flies    - Rotator Cuff    - Pull Over    - Neck    - Nordic    - Reverse Nordic    - Leg Curl
            - Flies    - Back Extension    

            And if anything is important enough, I can just make another category...
        DONE: Add these tables to the database.
        DONE: Alter Add component to allow entries into the new tables
        DONE: Fix the client side, so that it is looking into the sessions property, not the date
        DONE: Fix the limited exercise call... use that global variable... or construct the array from exercise properties
            (could also send the unique array down from the server... but it shouldn't be too expensive to go Object.keys(get.exercises))
        DONE: Alter the Edit components to allow any exercises
        DONE: Fix the Tonnage and Graph logic to accumulate correctly.

        DONE: Add variations

        // Tonnage

        DONE: Filter tonnage by exercise, don't want to see 27 difference exercises, all repeated by date.
        DONE: Zeroes still show for tonnage table
        
        DONE: Maybe mix and match exercise combinations into the accumulator, shouldn't be too hard programmatically
        DONE: IN LOG - Then variation filters need to be extended / improved, checkboxes to see multiple variations at a time
        DONE fix varMenu staying open when hide all and show all is toggled.


        DONE FIX key errors in log and tonnage

        DONE FIX error when redirected to log on submit of Add -- React is so broken, randomly decided it would fix itself, probably updating finally after a change I made ages ago.

        DONE FIX Add component allows resubmission of unchanged entry still.
        DONE FIX delete for all exercises

        DONE Extend variation entry to permit custom entries 
            DONE Test and make sure it works with the edit component, and all the others... the filters are going to need it as well, they are currently pulling from the global variationsObject
        DONE Add custom entry feature to the Edit component
                DONE: Allowed to add to tags of the same value to the edit component
                DONE: Edit component not filtering existing tags for customs.
                DONE: Can add missing mandatory fields now
                DONE: Can add custom fields...
                DONE: Allow new customs to be added.
                DONE: Fix the add exercise forms.

        DONE optional and mandatory variation entries

        DONE Cannot filter by variation for Graph... may be a desirable functionality.

        DONE Why not just access the website from my phone...
            WORKED Calendar component and the graph component seem to fail on mobile due to the .at() function.

        DONE I want the log reversal to be locally stored.

        // JSON to entry

        HOLD: Experiment with reading a JSON file, or text stream, and auto-filling the Add and Edit forms.
            DONE: I can output files AND  I can input files
            ON HOLD... Create a facility that generates a JSON object from a previous entry.. 
            Maybe I could open a web socket that receives requests from another app that I'll make. Maybe I'll make a native android app that interacts with my server.

        // Entry improvement
        
        DONE: Create programmable entry controls. Such as fill all mass fields with {value}, etc...
    
        DONE: More Colours for the Calendar
            Not sure what I want to do with this... maybe everything is categorised into general body parts and each gets its own of three base colours, and the individual exercises vary in transparency or something?

            DONE FIX: the gradient creation AND the box fill is NON modular. DRY.
            DONE We have colours now but GOD are they ugly, give me a localStorage object to store colour preferences with.
        

        ->> Would require major (<- not really...) refactoring, but I could tag each set with a variation template, and make it reasonably quick to assign in entry.
            THIS I want another variation field, with the same length as the mass and rep fields. The old variation field will become the templates field, which will be an array of arrays, if this is supported by postgres.
            ->> Refactoring

            Dump your database first, then just go tinker with that same database...

            DONE Leave the mass and rep fields alone, add an encapsulating array to variation, 
            DONE rename variation to variation_templates,
            DONE add another field to each exercise called variation, it is as long as the mass and reps arrays (Up to 20 items)
            refactor client side
                DONE initial pass over Breakdown, Log, Calendar, Tonnage & Tonnage Functions, Graph, Add and Edit
                Add template addition functionality to Edit component,
                    DONE Add UI functions... 
                    DONE fix Add so that the submission is accepted.
                    DONE Add variation map, default to first template
                DONE Then migrate template functionality to the Add component

                Test and correct the server queries to ensure things are working on that end.
                    DONE FOR Add...
                        DONE macro is broken... fix this.
                            DONE macro function is longer than it needs to be, clean it up
                        LATER - NOT DONE - for Add, I think I'll need to thoroughly check that submission logic properly rejects bad entry forms...
                    FOR Edit...
                        Fix everything... I'll need to refactor the update method, server side as well.
                        DONE check for multiples within a template
                        DONE check for multiples between the templates
                        DONE Check if guard clause is needed for template uniqueness check: NOT needed: for clause prevents it from happening
                        DONE check that mass and reps checks still work
                        DONE check that templates have something in each variation field
                        DONE It is possible to submit a template that doesn't get used, fix this.
                            DONE Need to pick up the vars array from each template first

                        DONE Fix the server side update code... done for updating lifts, haven't check newLifts code, or lostLifts
                        DONE Cannot see vars fields for each exercise.
                        DONE Can add templates and custom variations to the lifts objects...
                        NEXT ->> add templates and custom variations to the newLifts objects and fix the server side wrt the newLifts submission



                DONE for ADD: Ensure that update objects and add objects are prepared for postgres, that is, fill multi dimensional arrays of differing lengths with null to ensure they are of the same length.

                Add a variation field for every set, default to 1, send don't send nulls
                Add support for multi template sessions to the accumulator logic within the graph and tonnage components

                Add a button to go straight to the graph from the log page



        >> Then go work on the sheet music project.

    DONE: Experiment with the Accumulator logic for the Tonnage and Graph components, try to limit the number of times through the whole function to once for the three datasets.
